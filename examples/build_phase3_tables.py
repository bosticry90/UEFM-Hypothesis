#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Collect Phase 3.2 fit results and emit LaTeX snippet for the paper.
Inputs : outputs/phase3_lr_fit.tsv, outputs/phase3_tt_area_fit.tsv
Outputs: docs/auto/phase3_metrics.tex
"""
from __future__ import annotations
import re
from pathlib import Path

IN_LR = Path("outputs/phase3_lr_fit.tsv")
IN_TT = Path("outputs/phase3_tt_area_fit.tsv")
OUT_TEX = Path("docs/auto/phase3_metrics.tex")

def _extract_tag(path: Path, key: str, default: str = "N/A") -> str:
    if not path.exists():
        return default
    for line in path.read_text(encoding="utf-8").splitlines():
        if line.startswith("#"):
            m = re.match(rf"#\s*{re.escape(key)}\s*\t\s*([^\s]+)", line.strip())
            if m:
                return m.group(1)
    return default

def main():
    OUT_TEX.parent.mkdir(parents=True, exist_ok=True)
    alpha_med = _extract_tag(IN_LR, "alpha_hat_med", "N/A")
    alpha_avg = _extract_tag(IN_LR, "alpha_hat_avg", "N/A")
    beta_hat  = _extract_tag(IN_TT, "beta_hat", "N/A")
    C_hat     = _extract_tag(IN_TT, "C_hat", "N/A")

    tex = rf"""
% Auto-generated by examples/build_phase3_tables.py
\section*{{Phase 3.2: Fitted Metrics}}

\begin{{table}}[h]
\centering
\begin{{tabular}}{{l c}}
\toprule
Metric & Value \\
\midrule
Lieb--Robinson noise exponent $\alpha$ (median) & {alpha_med} \\
Lieb--Robinson noise exponent $\alpha$ (mean)   & {alpha_avg} \\
TT area-law exponent $\beta$                    & {beta_hat} \\
Prefactor $C$                                   & {C_hat} \\
\bottomrule
\end{{tabular}}
\caption{{Fitted parameters extracted from Phase 3.2.}}
\end{{table}}

\begin{{figure}}[h]
\centering
\includegraphics[width=0.47\textwidth]{{outputs/figs/lr_noise_alpha_fit.png}}
\hfill
\includegraphics[width=0.47\textwidth]{{outputs/figs/tt_area_beta_fit.png}}
\caption{{Left: Lieb--Robinson radius decay vs noise with fitted $\alpha$. Right: TT area-law scaling with fitted $\beta$.}}
\end{{figure}}
"""
    OUT_TEX.write_text(tex.strip()+"\n", encoding="utf-8")
    print(f"Wrote {OUT_TEX}")

if __name__ == "__main__":
    main()
